<!doctype html>
<html lang="en">

    <head>
	<meta charset="utf-8">

	<title></title>

	<meta name="description" content="">
	<meta name="author" content="Hakim El Hattab">

	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="dist/reset.css">
	<link rel="stylesheet" href="dist/reveal.css">
	<link rel="stylesheet" href="dist/theme/black.css" id="theme">

	<!-- Theme used for syntax highlighting of code -->
	<link rel="stylesheet" href="plugin/highlight/monokai.css">
	<style>
	 .playback {
	     display: none;
	 }
	 #scene {
	     display: flex;
	     height: 1080px;
	     width: 1920px;
	     align-items: center;
	     justify-content: center;
	     background: #333;
	 }
	</style>
    </head>

    <body>

	<div class="reveal" id="scene">

	    <!-- Any section element inside of this container is displayed as a slide -->
	    <div class="slides">
[% FOREACH slide IN slides %]
    [% slide %]
[% END %]
	    </div>

	</div>

	<script src="dist/reveal.js"></script>
	<script src="plugin/zoom/zoom.js"></script>
	<script src="plugin/notes/notes.js"></script>
	<script src="plugin/search/search.js"></script>
	<script src="plugin/markdown/markdown.js"></script>
	<script src="plugin/highlight/highlight.js"></script>
	<script>

	 // Also available as an ES module, see:
	 // https://revealjs.com/initialization/
	 Reveal.initialize({
	     controls: false,
	     progress: false,
	     center: true,
	     hash: true,
	     autoSlide: 2500,
	     // loop: true,

	     // Learn about plugins: https://revealjs.com/plugins/
	     plugins: [ RevealZoom, RevealNotes, RevealSearch, RevealMarkdown, RevealHighlight ]
	 });

	</script>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js"></script>

	<script>
	 const timeline = new TimelineMax()
	 timeline
	     .fromTo(
		 '#hello',
		 1,
		 { scale: 0, filter: 'blur(32px)' },
		 { scale: 1, filter: 'blur(0px)', ease: Power0.easeNone },
	     )
	     .to('#hello', 2, {
		 scale: 5,
		 opacity: 0,
		 rotation: 360,
		 textShadow: '0 16px 64px black, 0 0 128px blue',
	     })

	 // When rendering, stop the animation because we need a freeze frame.
	 const params = new URL(location).searchParams
	 if (params.get('render') != null) {
	     timeline.stop()
	 }
	 if (params.get('transparent') != null) {
	     document.documentElement.classList.add('is-transparent')
	 }

	 const fps = 60

	 // This function tells renderer about basic information about the video.
	 function getInfo() {
	     return {
		 fps,
		 numberOfFrames: timeline.duration() * fps, // adjust this to make it longer or shorter
	     }
	 }

	 // This function will be called before rendering each frame of the video.
	 function seekToFrame(frame) {
	     timeline.seek(frame / fps)
	 }
	</script>
    </body>
</html>
